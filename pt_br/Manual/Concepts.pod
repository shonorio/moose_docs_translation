
=head1 NAME

Moose::Manual::Concepts - Conceitos do Moose OO

=head1 CONCEITO DO MOOSE (vs Perl "Tradicional")

No passado, você pode não ter pensado muito sobre a diferença
entre os pacotes (I<packages>) e classes, atributos e métodos, construtores e
métodos, etc. Com o Moose, tudo isto são coisas conceitualmente distintas,
mesmo que implementadas sobre sobre o Perl padrão.

Nosso protocolo de meta-objeto (também conhecido como MOP) proporciona 
características de introspecção bem-definidos para cada um desses conceitos, 
e o Moose, por sua vez fornece facilidades distintas para cada um deles. 
Moose também introduz novos conceitos tais como roles (I<papéis>), 
modificadores de método, e delegação declarativa.

Saber o que significa estes conceitos no Moose, e como eles são
feitos no Perl 5 OO padrão é uma boa maneira de começar a aprender a usar
Moose.

=head2 Classe

Quando você diz "use Moose" em um pacote, você está transformando
o seu pacote numa classe. Na sua forma mais simples, uma classe 
será composto apenas de atributos e/ou métodos. Também pode incluir 
funções, modificadores de método, e muito mais.

Uma classe I<possue> zero ou mais B<atributos>.

Uma classe I<possue> zero ou mais B<métodos>.

Uma classe I<possue> zero ou mais superclasse(s) (conhecido como classe pai). Uma 
classe herda de sua(s) superclasse(s).

Uma classe I<possue> zero ou mais B<modificadores de métodos>. Estes modificadores
podem se aplicar aos seus próprios métodos ou métodos que são herdados de seus
parentes.

Uma classe I<faz> (e I<consume>) zero ou mais B<roles>.

Uma classe I<possue> um B<construtor> e um B<destrutor>. Estes são
fornecidos para você "gratuitamente" pelo Moose.

O B<construtor> aceita parâmetros com nome correspondente ao(s)
atributo(s) de classe e os usa para inicializar uma B<instância do objeto>.

A classe I<possue> a B<metaclasse>, que por sua vez, B<meta-atributos>,
B<meta-métodos>, e B<meta-roles>. Esta metaclasse I<descreve> a 
classe.

Uma classe geralmente é análogo a uma categoria de substantivos, como "People" ou
"Users".

  package Person;

  use Moose;
  # agora esta é uma classe Moose !

=head2 Atributo

Um atributo é uma propriedade definido pela classe. Ele I<sempre>
tem um nome, e I<pode ter> um número de outras propriedades.

Essas propriedades podem incluir marcador (I<flag>) de leitura/gravação, um B<tipo>, 
nomes de método de assessor, B<delegações>, um valor padrão, e muito mais.

Atributos não são métodos, mas definindo-os faz com que vários 
métodos de acesso sejam criados. No mínimo, em um atributo normal, 
sempre terá um método de leitura. Muitos atributos têm também outros
métodos, como um método de escrita, método de limpeza e método de predicado
("isto foi atribuído (I<set>)?").

Um atributo pode também definir B<delegações>, que vai criar 
métodos adicionais com base no mapeamento delegação.

Por padrão, o Moose armazena os atributos na instância do objeto, que é um 
hashref, I<mas isto é invisível para o autor de classe baseado em Moose>! 
É melhor pensar nos atributos do Moose como "propriedades" 
I<transparante> da B<instância do objeto>. Essas propriedades 
são acessadas através de métodos assessor bem definidos.

Um atributo é algo que os membros da classe tem. Por exemplo, 
People têm o primeiro e o último nome. Users têm senhas e o datetimes
do último login.

  has 'first_name' => (
      is  => 'rw',
      isa => 'Str',
  );

=head2 Método

Um B<método> é muito simples. Qualquer sub-rotina que você define na 
sua classe é um método.

B<Métodos> correspondem a verbos, e são o que os seus objetos podem fazer. Por 
exemplo, o User pode fazer login.

  sub login { ... }

=head2 Roles I<Papéis>

Um role é algo que uma classe I<faz>. Dizemos também que as classes
I<consome> roles. Por exemplo, a classe Machine pode ter o role Breakable 
(I<Quebrável>), assim como a classe Bone. O role é utilizado para definir um conceito
que atravessa várias classes independentes, como "breakability", ou
"tem uma cor".

Um role I<possue> zero ou mais B<atributos>.

Um role I<possue> zero ou mais B<métodos>.

Um role I<possue> zero ou mais B<modificadores de métodos>.

Um role I<possue> zero ou mais B<métodos requeridos>.

O método requerido não é implementado pelo role. Método requerido informa
informa "que para utilizar este Role você tem que implementar este método".

Um role I<possue> zero ou mais B<roles excluídos>.

Um role excluído é um role que o role que excluí as roles que não pode ser 
combinada com esta role.

Os roles são I<compostos> dentro das classes (ou de outros roles). Quando um role é
compostos dentro de uma classe, seus atributos e métodos são "incluídos" na classe. 
Os roles I<não aparecem> na hierarquia de herança. Quando
um role é composto, seus atributos e os métodos são exibidos como se fossem
definidos I<na própria classe>.

	
Role são como mixins ou interfaces em outros linguagens OO.

  package Breakable;

  use Moose::Role;

  has is_broken => (
      is  => 'rw',
      isa => 'Bool',
  );

  requires 'break';

  before 'break' => {
      my $self = shift;

      $self->is_broken(1);
  };

=head2 Modificadores de Método  

Um modificador de método é um hook (I<gancho>) que é processado quando um método nomeado é 
chamado. Por exemplo, você poderia dizer que "antes de chamar o C<login()>, chame 
esse modificador primeiro". Modificadores vêm em diferentes sabores como 
"before" (I<"antes">), "after" (I<"depois">), "around" (I<"em torno">) e "augment" (I<"aumentar">), 
e você pode aplicar mais de um modificador em um único método.

Modificares de método são muitas vezes utilizados como uma alternativa para substituir 
um método na classe pai. Eles também são usados em role como uma maneira de 
modificar os métodos na classe de consumo.

Sob o capô, um modificador de método é apenas uma rotina normal em Perl 
que é chamado antes ou depois (ou cerca, etc) que o método chamado.

  before 'login' => sub {
      my $self = shift;
      my $pw   = shift;

      warn "Called login() with $pw\n";
  };

=head2 Tipo

Moose também vem com um sistema do tipo (em miniatura). Isso lhe permite
definir os tipos para os atributos. Moose tem um conjunto de tipos nativos baseado 
no que é fornecido no Perl, como C<Str>, C<Num>, C<Bool>, C<HashRef>, etc.

Além disso, cada classe da sua aplicação também pode ser utilizado como tipo.

Finalmente, você pode definir seus próprios tipos, quer como subtipos ou tipos 
totalmente novos, com suas próprias restrições. Por exemplo, você pode definir um 
tipo C<PosInt>, um subtipo do C<Int> que permite apenas números positivos.

=head2 Delegação

Atributos Moose fornecem sintaxe declarativa para definir
delegações. A delegação é um método que carrega método de um
atributo para fazer o trabalho real.

=head2 Construtor

O construtor cria uma B<instância do objeto> da classe. No Perl tradicional, 
é feito através da definição de um método chamado 
de C<new()>, que por sua vez é abençoado com uma referência.

Com o Moose, o método C<new()> é criado para você, e simplesmente
faz a coisa certa. Você nunca precisará definir o seu próprio
construtor!

Às vezes você quer fazer algo, sempre que um objeto é criado. 
Nesses casos, você pode fornecer o método C<BUILD()> em sua classe. Moose
vai chamar isso para você depois de criar um novo objeto.

=head2 Destruidor

Este é um método especial chamado quando a instância objeto sai do 
escopo. Você pode especificar o quê a sua classe faz neste método se você 
precisar, mas normalmente você não precisará.

No Perl 5 tradicional, este é o método C<DESTROY()>, mas no Moose
o método é o C<DEMOLISH()>.

=head2 Instância de Objeto

Uma instância de objeto é um substantivo específico na "categoria" da classe. Por 
exemplo, uma determinada Pessoa ou Usuário. Uma instância é criada pelo
B<constructor> de classe.

Uma instância tem valores para seus atributos. Por exemplo, um determinado
pessoa tem um nome e sobrenome.

No Perl 5 tradicional, esta é muitas vezes uma referência de hash. Com
Moose, você não precisa se preocupar sobre o que a sua instância do objeto
realmente é. (Ok, é geralmente um hashref blessed (I<abençoado>) com Moose, também.)

=head2 Moose vs tradicional, em resumo

=over 4

=item * Classe

Pacote com nenhuma introspecção que não seja o lamaçal da manipulação 
da tabela de símbolo.

Com o Moose, você tem declaração e introspecção bem definido.

=item * Atributos

Métodos de acesso manuscrito, manipulação da tabela de símbolos, ou a utilização
de um módulo auxiliar como o C<Class::Accessor>.

Com Moose, estes são definidos de forma declarativa, e distinta dos métodos.

=item * Métodos

Estes são muito semelhantes em Moose e no Perl tradicional.

=item * Roles

C<Class::Trait> or C<Class::Role>, or maybe C<mixin.pm>.

Com Moose, eles são parte do núcleo do conjunto de recursos, e são
introspectado com tudo mais.

=item * Modificadores de Métodos

Só poderia ser feito através de 'magia negra' na tabela de símbolo, e você
provavelmente nunca viu isso antes (pelo menos em Perl 5).

=item * Tipo

Verificação manual de parâmetro no seu método C<new()> e assessores.

Com Moose você declara os tipos, e os utiliza pelo nome
em seus atributos.

=item * Delegação

C<Class::Delegation> or C<Class::Delegator>, mas provavelmente mais codificação 
manual.

Com Moose, isso também é declarativa.

=item * Construtor

Um método C<new()> que chama C<bless> em uma referência.

Vem de graça quando você define uma classe com Moose.

=item * Destruidor

O método C<DESTROY()>.

Com Moose, ele é chamado de C<DEMOLISH()>.

=item * Instância de objeto 

Uma referência blessed (I<abençoado>), geralmente uma referência de hash.

Com Moose, isso é uma coisa transparente que tem um monte de atributos
e métodos, tal como definido pela sua classe.

=item * Imutabilização

Moose vem com um recurso chamado "imutabilização". Quando você define 
sua classe imutável, isso significa que você é feito adicionando métodos, atributos,
papéis, etc.

 Moose Isso permite otimizar a sua classe com um bando de
extremamente sujo em truques lugar de geração de código que acelerar as coisas
como a construção de objetos e assim por diante.

Moose comes with a feature called "immutabilization". When you make
your class immutable, it means you're done adding methods, attributes,
roles, etc. This lets Moose optimize your class with a bunch of
extremely dirty in-place code generation tricks that speed up things
like object construction and so on.

=back

=head1 META WHAT?

A metaclass is a class that describes classes. With Moose, every class
you define gets a C<meta()> method. It returns a L<Moose::Meta::Class>
object, which has an introspection API that can tell you about the
class it represents.

  my $meta = User->meta();

  for my $attribute ( $meta->get_all_attributes ) {
      print $attribute->name(), "\n";

      if ( $attribute->has_type_constraint ) {
          print "  type: ", $attribute->type_constraint->name, "\n";
      }
  }

  for my $method ( $meta->get_all_methods ) {
      print $method->name, "\n";
  }

Almost every concept we defined earlier has a meta class, so we have
L<Moose::Meta::Class>, L<Moose::Meta::Attribute>,
L<Moose::Meta::Method>, L<Moose::Meta::Role>,
L<Moose::Meta::TypeConstraint>, L<Moose::Meta::Instance>, and so on.

=head1 BUT I NEED TO DO IT MY WAY!

One of the great things about Moose is that if you dig down and find
that it does something the "wrong way", you can change it by extending
a metaclass. For example, you can have arrayref based objects, you can
make your constructors strict (no unknown parameters allowed!), you can
define a naming scheme for attribute accessors, you can make a class a
Singleton, and much, much more.

Many of these extensions require surprisingly small amounts of code,
and once you've done it once, you'll never have to hand-code "your way
of doing things" again. Instead you'll just load your favorite
extensions.

  package MyWay::User;

  use Moose;
  use MooseX::StrictConstructor
  use MooseX::MyWay;

  has ...;

=head1 WHAT NEXT?

So you're sold on Moose. Time to learn how to really use it.

If you want to see how Moose would translate directly into old school
Perl 5 OO code, check out L<Moose::Manual::Unsweetened>. This might be
helpful for quickly wrapping your brain around some aspects of "the
Moose way".

Or you can skip that and jump straight to L<Moose::Manual::Classes>
and the rest of the L<Moose::Manual>.

After that we recommend that you start with the L<Moose::Cookbook>. If
you work your way through all the recipes under the basics section,
you should have a pretty good sense of how Moose works, and all of its
basic OO features.

After that, check out the Role recipes. If you're really curious, go
on and read the Meta and Extending recipes, but those are mostly there
for people who want to be Moose wizards and change how Moose works.

=head1 AUTHOR

Dave Rolsky E<lt>autarch@urth.orgE<gt>

=head1 TRADUTOR 

Solli M. Honório E<lt>shonorio@perl.org.brE<gt>

=head1 COPYRIGHT E LICENÇA

Copyright 2008-2009 by Infinity Interactive, Inc.

L<http://www.iinteractive.com>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

Este programa é software livre; você pode redistribuí-lo e/ou modificar
nos mesmos termos que o próprio Perl.

=cut
