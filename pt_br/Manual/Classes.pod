=pod

=head1 NAME

Moose::Manual::Classes - Fazendo suas classes utilizar Moose ( e subclasse )

=head1 USING MOOSE

Usar Moose é muito simples, você só utiliza C<use Moose>:

  package Person;

  use Moose;

É isso aí, você fez uma classe com Moose!

Existe muita coisa acontecendo aqui sob o capô, então vamos analisar-lo.

Quando você carrega L<Moose>, um monte de facilidades são exportados 
para sua classe. Estas incluem coisas como C<extends>, C<has>, C<with> 
e muito mais. Essas funções são o que você usa para definir sua classe. 
Por exemplo, para definir um atributo ...

  package Person;

  use Moose;

  has 'ssn' => ( is => 'rw' );

Atributos são descritos na documentação L<Moose::Manual::Attributes>.

Carregar o Moose também habilita os pragmas C<strict> e C<warnings> 
na sua classe.

Quando você carrega o Moose, sua classe se tornará uma subclasse do
L<Moose::Object>. A classe L<Moose::Object> provê o construtor e 
destrutor padrão, bem como os métodos de construção de objeto.
Você pode lêr mais sobre isto no documento L<Moose::Manual::Construction>.

Por conveniência, Moose cria um novo tipo de classe para sua classe. Veja 
o documento L<Moose::Manual::Types> para saber mais sobre os tipos.

Ele também cria um objeto L<Moose::Meta::Class> para sua classe. Este
objeto metaclasse está disponível através do método C<meta> na sua classe,
por exemplo C<< Person->meta>>.

O objeto metaclasse fornece API de introspeção para sua classe. Ele 
também é usado pelo próprio Moose para adicionar atributos, definir 
classes pai, e assim por diante. Na verdade, todas as facilidades do Moose 
utilizam estes métodos do objeto metaclasse (e outras meta API).

=head1 SUBCLASSES

Moose providência uma função simples para a declaração de suas
classes pai, o C<extends>:

  package User;

  use Moose;

  extends 'Person';

  has 'username' => ( is => 'rw' );

Note que a cada chamada para C<extends> seus parentes será <reiniciado>. Para 
herança múltipla é necessário fornecer todos os parentes de uma só vez, 
C<extends 'Foo', 'Bar'>.

Você pode utilizar o Moose para extender parentes não-Moose. No entanto, 
quando você fizer isso, você vai herdar o construtor da classe pai (assumindo 
que também é chamado C<new>). Nesse caso, você terá que tomar o cuidado de 
inicializar os atributos manualmente, no construtor da classe pai, ou na sua 
subclasse, e você vai perder uma grande quantidade de magia do Moose.
 
=head1 NÃO MOOSE

Moose também permite à você remover as suas funções mágicas do namespace 
da sua classe. Recomendamos que você faça uso deste recurso, uma vez que 
isto apenas faça suas classes mais "limpa". Você pode fazer isso simplesmente 
adicionando C <no Moose> no final do seu módulo.

  package Person;

  use Moose;

  has 'ssn' => ( is => 'rw' );

  no Moose;

Isto removerá as funções mágicas do Moose do namespace da tua classe, então
C<< Person->can('has') >> não será mais válido.

Uma forma mais genérica para unimport não somente as exportações do L<Moose>, mas também 
todas tipos de bibliotecas e outros módulos é usar L<namespace::clean> ou L<namespace::autoclean>.

=head1 CRIANDO ISTO RÁPIDO

Moose tem um recurso chamado "immutabilization" que você pode usar para 
aumentar a velocidade das suas classes em tempo de execução. No entanto, 
utilizar este recurso provocará lentidão na primeira carga da classe. Quando você transforma a 
sua classe imutável, você diz ao Moose que ela não sofrerá alterações 
no futuro. Você não poderá acrescentar qualquer atributo, método, role, etc

Isso faz com que o Moose gere códigos específicos para sua classe. Em 
particular, ele cria um construtor "inline", tornando a construção 
do objeto mais rápida.

Para tornar a sua classe imutável, você simplesmente carrega C<make_immutable> na
tua classe.

  __PACKAGE__->meta->make_immutable;

=head2 Immutabilization e C<new()>

Se você subreescrever o C<new()> na sua classe, então o código de immutabilization
não será capaz de fornecer um construtor otimizado para a sua classe.
Em vez disso, você deve usar o método C<BUILD()>, que será chamado 
a partir do construtor inlined.

Alternativamente, se você realmente precisa fornecer um C<new()>, você 
também pode fornecer seu próprio método immutabilization. Fazer isso requer 
a expansão da metaclasse do Moose, e está bem além do escopo deste manual.

=head1 AUTOR

Dave Rolsky E<lt>autarch@urth.orgE<gt>

=head1 TRADUTOR 

Solli M. Honório E<lt>shonorio@perl.org.brE<gt>

=head1 COPYRIGHT E LICENÇA

Copyright 2008-2009 by Infinity Interactive, Inc.

L<http://www.iinteractive.com>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

Este programa é software livre; você pode redistribuí-lo e/ou modificar
nos mesmos termos que o próprio Perl.

=cut
